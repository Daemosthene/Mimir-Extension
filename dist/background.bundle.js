(()=>{const e=["Turn Professional","Socratic Review","Daily Brief","Citation Finder","Flashcard Generator","Upload Image","Enter Prompt","Blink","AI Detector"];async function r(r){const o=(new Date).toISOString().split("T")[0];return new Promise(t=>{chrome.storage.local.get(["usage","isProUser","isAdminMode"],n=>{const{usage:s={},isProUser:a=!1,isAdminMode:c=!1}=n;if(c)return console.log("🔥 BACKGROUND ADMIN MODE: Bypassing usage restrictions for",r),t(!0);if(a)return t(!0);const i=s[o]||{};if(e.includes(r)){const e=i[r]||0;e<1?(i[r]=e+1,s[o]=i,chrome.storage.local.set({usage:s},()=>t(!0))):t(!1)}else t(!0)})})}chrome.runtime.onInstalled.addListener(()=>{chrome.contextMenus.create({id:"mimir_menu",title:"Mimir Tools",contexts:["selection","page"]}),["Summarize","Explain Like I'm 5","Citation Finder","Definition","Daily Brief","Socratic Review","Flashcard Generator","Turn Professional","Translate Text","Upload Image"].forEach(e=>{chrome.contextMenus.create({id:e,parentId:"mimir_menu",title:e,contexts:["selection","page"]})}),chrome.storage.local.get("theme",e=>{const r={default:{16:"extensionLogo.png",48:"extensionLogo.png",128:"extensionLogo.png"},red:{16:"red.png",48:"red.png",128:"red.png"},orange:{16:"orange.png",48:"orange.png",128:"orange.png"},darkblue:{16:"darkblue.png",48:"darkblue.png",128:"darkblue.png"},green:{16:"green.png",48:"green.png",128:"green.png"},purple:{16:"purple.png",48:"purple.png",128:"purple.png"},teal:{16:"teal.png",48:"teal.png",128:"teal.png"},yellow:{16:"yellow.png",48:"yellow.png",128:"yellow.png"}},o=r[e.theme||"default"]||r.default;chrome.action.setIcon({path:o},()=>{chrome.runtime.lastError&&console.warn("⚠️ Failed to set icon:",chrome.runtime.lastError.message)})})}),chrome.runtime.onStartup.addListener(()=>{chrome.storage.local.get("checkoutSessionId",({checkoutSessionId:e})=>{e&&async function(){chrome.storage.local.get("checkoutSessionId",async({checkoutSessionId:e})=>{if(e)try{const r=await fetch(`https://mimir-server-daemosthene-mimir-extension.vercel.app/api/verify-subscription?sessionId=${e}`),{status:o,currentPeriodEnd:t}=await r.json(),n="active"===o;chrome.storage.local.set({isProUser:n}),n&&t&&chrome.alarms.create("renewCheck",{when:1e3*t})}catch(e){console.error("Failed to verify subscription:",e)}})}()})}),chrome.contextMenus.onClicked.addListener(async(e,o)=>{const t=e.menuItemId,n=e.selectionText?.trim();o?.id&&("Upload Image"!==t?n?r(t).then(e=>{e?chrome.tabs.sendMessage(o.id,{type:"open_sidebar_tool",action:t,text:n}):chrome.tabs.sendMessage(o.id,{type:"open_sidebar_tool",action:"Turn Professional",text:"🔒 This tool requires a Pro subscription. Click 'Go Pro' in the extension popup to unlock."})}):chrome.scripting.executeScript({target:{tabId:o.id},func:()=>document.body.innerText},e=>{const n=e?.[0]?.result||"";r(t).then(e=>{e?chrome.tabs.sendMessage(o.id,{type:"open_sidebar_tool",action:t,text:n}):chrome.tabs.sendMessage(o.id,{type:"open_sidebar_tool",action:"Turn Professional",text:"🔒 This tool requires a Pro subscription. Click 'Go Pro' in the extension popup to unlock."})})}):chrome.tabs.sendMessage(o.id,{type:"open_upload_image"}))}),chrome.runtime.onMessage.addListener((e,r,o)=>{if("proxy_api_request"===e.type){console.log("🔥 Background: Received proxy API request",e.payload);const{url:r,method:t,body:n}=e.payload||{};if(!r)return console.error("🔥 Background: Invalid proxy API request - missing URL"),o({success:!1,error:"Missing URL in proxy request"}),!0;const s=new AbortController,a=setTimeout(()=>s.abort(),3e4);let c={method:t||"POST",signal:s.signal};return n&&n.imageData&&"Upload Image"===n.action?fetch(n.imageData).then(e=>e.blob()).then(e=>{const o=new FormData;return o.append("image",e,"upload.png"),c.body=o,fetch(r,c)}).then(e=>{if(clearTimeout(a),!e.ok)throw console.error(`🔥 Background: Proxy API request failed with status: ${e.status}`),new Error(`API request failed with status: ${e.status} ${e.statusText}`);return e.json().catch(e=>{throw console.error("🔥 Background: Error parsing JSON response",e),new Error("Invalid JSON response from API")})}).then(e=>{console.log("🔥 Background: Proxy API request success",e),o(e?{success:!0,data:e}:{success:!1,error:"Empty response from API"})}).catch(e=>{clearTimeout(a),console.error("🔥 Background: Proxy API request error",e);let r=e.message||"Unknown error occurred";"AbortError"===e.name?r="Request timed out after 30 seconds":r.includes("NetworkError")&&(r="Network error: Please check your internet connection"),o({success:!1,error:r,details:{name:e.name,message:e.message,stack:e.stack}})}):(c.headers={"Content-Type":"application/json"},c.body=JSON.stringify(n||{}),fetch(r,c).then(e=>{if(clearTimeout(a),!e.ok)throw console.error(`🔥 Background: Proxy API request failed with status: ${e.status}`),new Error(`API request failed with status: ${e.status} ${e.statusText}`);return e.json().catch(e=>{throw console.error("🔥 Background: Error parsing JSON response",e),new Error("Invalid JSON response from API")})}).then(e=>{console.log("🔥 Background: Proxy API request success",e),o(e?{success:!0,data:e}:{success:!1,error:"Empty response from API"})}).catch(e=>{clearTimeout(a),console.error("🔥 Background: Proxy API request error",e);let r=e.message||"Unknown error occurred";"AbortError"===e.name?r="Request timed out after 30 seconds":r.includes("NetworkError")?r="Network error: Please check your internet connection":r.includes("CORS")&&(r="CORS error: The API server rejected the request"),o({success:!1,error:r,details:{name:e.name,message:e.message,stack:e.stack}})})),!0}return"captureVisibleTab"===e.type?(console.log("🔥 Background: Received captureVisibleTab request"),chrome.tabs.query({active:!0,currentWindow:!0},e=>{if(!e||!e[0])return console.error("🔥 Background: No active tab found"),void o({success:!1,error:"No active tab found"});const r=e[0];console.log("🔥 Background: Capturing tab",r.id),chrome.tabs.captureVisibleTab(r.windowId,{format:"png"},e=>(console.log("🔥 Background: captureVisibleTab callback executed"),chrome.runtime.lastError?(console.error("🔥 Background: Capture failed:",chrome.runtime.lastError),void o({success:!1,error:chrome.runtime.lastError.message})):e?(console.log("🔥 Background: Capture successful, dataUrl length:",e.length),void o({success:!0,imageData:e})):(console.error("🔥 Background: No dataUrl returned"),void o({success:!1,error:"No image data captured"}))))}),!0):"getTabInfo"===e.type?(console.log("🔥 Background: Received getTabInfo request"),chrome.tabs.query({active:!0,currentWindow:!0},e=>{if(!e||!e[0])return console.error("🔥 Background: No active tab found"),void o({success:!1,error:"No active tab found"});const r=e[0];console.log("🔥 Background: Tab info",r),o({success:!0,tab:r})}),!0):void 0}),chrome.runtime.onMessage.addListener((e,r,o)=>{if("setIconByTheme"===e.type){const r={default:{16:"extensionLogo.png",48:"extensionLogo.png",128:"extensionLogo.png"},red:{16:"red.png",48:"red.png",128:"red.png"},orange:{16:"orange.png",48:"orange.png",128:"orange.png"},darkblue:{16:"darkblue.png",48:"darkblue.png",128:"darkblue.png"},green:{16:"green.png",48:"green.png",128:"green.png"},purple:{16:"purple.png",48:"purple.png",128:"purple.png"},teal:{16:"teal.png",48:"teal.png",128:"teal.png"},yellow:{16:"yellow.png",48:"yellow.png",128:"yellow.png"}},o=r[e.theme||"default"]||r.default;chrome.action.setIcon({path:o},()=>{chrome.runtime.lastError&&console.warn("⚠️ Failed to set icon:",chrome.runtime.lastError.message)})}"themeChanged"===e.type&&chrome.tabs.query({},r=>{r.forEach(r=>{chrome.tabs.sendMessage(r.id,e).catch(()=>{})})})})})();